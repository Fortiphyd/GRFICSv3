#include "beremiz.h"
#ifndef __POUS_H
#define __POUS_H

#include "accessor.h"
#include "iec_std_lib.h"

__DECLARE_ENUMERATED_TYPE(LOGLEVEL,
  LOGLEVEL__CRITICAL,
  LOGLEVEL__WARNING,
  LOGLEVEL__INFO,
  LOGLEVEL__DEBUG
)
// FUNCTION_BLOCK LOGGER
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,TRIG)
  __DECLARE_VAR(STRING,MSG)
  __DECLARE_VAR(LOGLEVEL,LEVEL)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,TRIG0)

} LOGGER;

void LOGGER_init__(LOGGER *data__, BOOL retain);
// Code part
void LOGGER_body__(LOGGER *data__);
// FUNCTION
REAL SCALE_TO_REAL(
  BOOL EN, 
  BOOL *__ENO, 
  UINT RAW_INPUT_VALUE, 
  REAL *__SCALED_REAL, 
  REAL REAL_MAX, 
  REAL REAL_MIN);
// FUNCTION
UINT SCALE_TO_UINT(
  BOOL EN, 
  BOOL *__ENO, 
  REAL REAL_IN, 
  UINT *__UINT_OUT);
// FUNCTION
UINT CONTROL(
  BOOL EN, 
  BOOL *__ENO, 
  UINT *__VALVE_POS, 
  REAL RMAX, 
  REAL RMIN, 
  REAL K, 
  UINT CURRENT_VALUE, 
  UINT SETPOINT, 
  UINT CURRENT_POS);
// FUNCTION
UINT PRESSURE_OVERRIDE(
  BOOL EN, 
  BOOL *__ENO, 
  UINT PRESSURE_IN, 
  UINT CURRENT_SP, 
  UINT *__PRODUCT_SP, 
  UINT OVERRIDE_SP);
// PROGRAM MAIN1
// Data part
typedef struct {
  // PROGRAM Interface - IN, OUT, IN_OUT variables

  // PROGRAM private variables - TEMP, private and located variables
  __DECLARE_LOCATED(UINT,PRODUCT_FLOW_SETPOINT)
  __DECLARE_LOCATED(UINT,A_SETPOINT)
  __DECLARE_LOCATED(UINT,PRESSURE_SP)
  __DECLARE_LOCATED(UINT,OVERRIDE_SP)
  __DECLARE_LOCATED(UINT,LEVEL_SP)
  __DECLARE_LOCATED(UINT,F1_VALVE_POS)
  __DECLARE_LOCATED(UINT,F1_FLOW)
  __DECLARE_LOCATED(UINT,F2_VALVE_POS)
  __DECLARE_LOCATED(UINT,F2_FLOW)
  __DECLARE_LOCATED(UINT,PURGE_VALVE_POS)
  __DECLARE_LOCATED(UINT,PURGE_FLOW)
  __DECLARE_LOCATED(UINT,PRODUCT_VALVE_POS)
  __DECLARE_LOCATED(UINT,PRODUCT_FLOW)
  __DECLARE_LOCATED(UINT,PRESSURE)
  __DECLARE_LOCATED(UINT,LEVEL)
  __DECLARE_LOCATED(UINT,A_IN_PURGE)
  __DECLARE_LOCATED(UINT,B_IN_PURGE)
  __DECLARE_LOCATED(UINT,C_IN_PURGE)
  __DECLARE_LOCATED(UINT,F1_VALVE_SP)
  __DECLARE_LOCATED(UINT,F2_VALVE_SP)
  __DECLARE_LOCATED(UINT,PURGE_VALVE_SP)
  __DECLARE_LOCATED(UINT,PRODUCT_VALVE_SP)
  __DECLARE_VAR(UINT,PRODUCT_VALVE_SAFE)
  __DECLARE_VAR(UINT,PURGE_VALVE_SAFE)
  __DECLARE_VAR(UINT,F1_VALVE_SAFE)
  __DECLARE_VAR(UINT,F2_VALVE_SAFE)
  __DECLARE_LOCATED(INT,HMI_PRESSURE)
  __DECLARE_LOCATED(INT,HMI_LEVEL)
  __DECLARE_LOCATED(INT,HMI_F1_VALVE_POS)
  __DECLARE_LOCATED(INT,HMI_F1_FLOW)
  __DECLARE_LOCATED(INT,HMI_F2_VALVE_POS)
  __DECLARE_LOCATED(INT,HMI_F2_FLOW)
  __DECLARE_LOCATED(INT,HMI_PURGE_VALVE)
  __DECLARE_LOCATED(INT,HMI_PURGE_FLOW)
  __DECLARE_LOCATED(INT,HMI_PRODUCT_VALVE)
  __DECLARE_LOCATED(INT,HMI_PRODUCT_FLOW)
  __DECLARE_VAR(REAL,TEST_REAL)
  __DECLARE_LOCATED(UINT,TEST_INT)

} MAIN1;

void MAIN1_init__(MAIN1 *data__, BOOL retain);
// Code part
void MAIN1_body__(MAIN1 *data__);
// FUNCTION_BLOCK COMPLEX
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(INT,IN)
  __DECLARE_VAR(BYTE,N)
  __DECLARE_VAR(INT,OUT)
  __DECLARE_VAR(BYTE,ERR)
  __DECLARE_VAR(INT,I)
  __DECLARE_VAR(INT,A)

} COMPLEX;

void COMPLEX_init__(COMPLEX *data__, BOOL retain);
// Code part
void COMPLEX_body__(COMPLEX *data__);
#endif //__POUS_H
